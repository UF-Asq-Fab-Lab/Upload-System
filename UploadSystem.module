<?php

/*
* A² Fab Lab Upload System
* Thomas R. Storey (trstorey.sysreturn.net)
* contact: storey.thomas@gmail.com
* 2/12/15
* Makes an admin page to manage the upload system and uploaded files
*/

    class UploadSystem extends Process implements Module, ConfigurableModule {

        public static function getModuleInfo() {
            return array(
                'title' => 'A² Fab Lab Upload System',
                'summary' => 'Makes an admin page to manage the upload system and uploaded files.',
                'version' => 2,
                'autoload' => true 
            );
        } 

        public function __construct() {
            // optionally set our default values before ProcessWire configures the module
           /* $this->defaults = array(
                "tableName" => "uploadsystem_options",
                "tableColumns" => "materialAndColor_Textarea available_Checkbox",
                "tableLabel" => "Upload System Options Table",
                "tableTags" => "upload",
                "pageName" => "uploadsystem_management",
                "pageTitle" => "Upload System Management",
                "uploadsPageName" => "uploadsystem_files",
                "uploadsPageTitle" => "Upload System Files",
                "uploadsTableName" => "uploadsystem_filesTable",
                "uploadsTableCols" => "name email ufid units dimensions print_conf_url timestamp body file",
                "uploadsTableLabel" => "Upload System Files Table",
                "uploadsTableTags" => "upload"
            );   */
        }

        public function init() {
            // you can now assume that your configuration data has been populated to the module
            // meaning you can access $this->fullname; or $this->email; in any of your module's functions

            if(isset($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], $this->upload_page_url) !== false) {
                $this->addHookBefore('PageRender::renderPage', $this, 'prependUploadHandler');
                $this->addHook('ProcessPageView::execute', $this, 'addUploadForm');
            }


        }

        public static function getDefaultConfig() {
            return array (
                   "upload_form_filepath"                   => "/includes/upload-form.inc",
                   "upload_handler_filepath"                => "/includes/upload-handler.inc",
                   "upload_form_js_filepath"                => "/assets/js/uploadsystem.js",
                   "email"                                  => "storey.thomas@gmail.com",
                   "upload_page_url"                        => "path/to/upload-page",
                   "page_id"                                => null,
                   "pageTemplate_id"                        => null,
                   "pageFieldGroup_id"                      => null,
                   "uploadsystem_optionsTable_id"           => null,
                   "uploadsystem_optionsTableTemplate_id"   => null,
                   "uploadsystem_optionsTableFieldgroup_id" => null,
                   "uploadsystem_optionsTableFields_ids"    => "",
                   "uploadsPage_id"                         => null,
                   "uploadsPageTemplate_id"                 => null,
                   "uploadsPageFieldgroup_id"               => null,
                   "uploadsystem_filesTable_id"             => null,
                   "uploadsystem_filesTemplate_id"          => null,
                   "uploadsystem_filesFieldgroup_id"        => null,
                   "uploadsystem_filesTableFields_ids"      => "",
                   "tableName"                              => "uploadsystem_options",
                   "tableColumns"                           => "materialAndColor_Textarea available_Checkbox",
                   "tableLabel"                             => "Upload System Options Table",
                   "tableTags"                              => "upload",
                   "pageName"                               => "uploadsystem_management",
                   "pageTitle"                              => "Upload System Management",
                   "uploadsPageName"                        => "uploadsystem_files",
                   "uploadsPageTitle"                       => "Upload System Files",
                   "uploadsTableName"                       => "uploadsystem_filesTable",
                   "uploadsTableCols"                       => "username_Text email_Email ufid_Integer units_Text dimensions_Text printConfUrl_URL timestamp_Text body_Textarea file_File",
                   "uploadsTableLabel"                      => "Upload System Files Table",
                   "uploadsTableTags"                       => "upload"
                );
        }

        public function ___install() {
            $defaults = self::getDefaultConfig();
            wire('modules')->saveModuleConfigData($this, $defaults);
            $this->message("Config available?: {$defaults['tableName']}");
            $page = $this->getInstalledPage(false, $defaults);
            $uploadsPage = $this->getUploadsPage($page, $defaults);
            $this->message("Installed to {$page->path}.");
            $this->message("Uploads will go to {$uploadsPage->path}.");
        }

        /**
        * uninstall - delete everything created by the module: 
        *  module page, 
        *  page template, 
        *  page template fieldgroup, 
        *  pagetable (page template field)
        *  pagetable template
        *  pagetable fieldgroup
        *  pagetable page fields
        *  uploads parent page
        *  upload file pages
        *  upload parent page template
        *  upload parent page fieldgroup
        *  upload parent page fields
        *  upload filepage template
        *  upload filepage fieldgroup
        *  upload filepage fields
        **/

        public function ___uninstall() {
            $defaults = self::getDefaultConfig();
            $data = wire('modules')->getModuleConfigData($this->className());
            $data = array_merge($defaults, $data);
            $page = $this->getInstalledPage(true, $data);
            $uploadsPage = $this->getUploadsPage($page, $data);
            $template = $page->template;
            $uploadsTemplate = $uploadsPage->template;
            $pt = $this->getPageTable($data['tableName'], 
                                      $data['tableColumns'], 
                                      $data['tableLabel'], 
                                      $data['tableTags'], 
                                      $page->id);
           $uploadspt = $this->getPageTable($data['uploadsTableName'], 
                                      $data['uploadsTableCols'], 
                                      $data['uploadsTableLabel'], 
                                      $data['uploadsTableTags'], 
                                      $uploadsPage->id);
           if(is_array($pt->template_id)){
               $ptTemplate = $this->templates->get($pt->template_id[0]); 
            } else {
               $ptTemplate = $this->templates->get($pt->template_id);
            }
            
            //REMOVE PAGE AND CHILDREN
            if($page->id) {
                if(count($page->children)){
                    foreach ($page->children as $child) {
                        $this->message("Removed page table entry {$child->path}");
                        $this->pages->delete($child); 
                    }
                } 
                $this->message("Removed {$page->path}");
                $this->pages->delete($page, true); 
            }

            //REMOVE PAGE TEMPLATE AND FIELDGROUP
            if($template->id){
                $template->flags = Template::flagSystemOverride;
                $template->flags = 0;
                $template->save();
                $fgname = $template->fieldgroup->name;
                if ($template->getNumPages() > 0) {
                    throw new WireException("Can't uninstall because template is used by some pages.");
                } else {
                    $this->message("Remove: page template: {$template->name}");
                    $this->templates->delete($template);
                    $this->message("Remove: page template fieldgroup: {$fgname}");
                    $this->fieldgroups->delete($this->fieldgroups->get("name=$fgname"));
                }
            }

            //REMOVE CHILD TEMPLATE (PAGE TABLE ENTRY TEMPLATE AND FIELDGROUP)
            if($ptTemplate->id){
                $ptTemplate->flags = Template::flagSystemOverride;
                $ptTemplate->flags = 0;
                $ptTemplate->save();
                if($ptTemplate->getNumPages() > 0){
                    throw new WireException("Can't uninstall because template is used by some pages.");
                } else {
                    $fgname = $ptTemplate->fieldgroup->name;
                    $this->message("Remove: pagetable template: {$ptTemplate->name}");
                    $this->templates->delete($ptTemplate);
                    $this->message("Remove: pagetable template fieldgroup: {$fgname}");
                    $this->fieldgroups->delete($this->fieldgroups->get($fgname));
                }
            }

            //REMOVE PAGETABLE FIELD
            $field = $this->fields->get("name={$data['tableName']}");
            if($field->id){
                $this->message("Remove: pagetable: {$field->name}");
                $this->fields->delete($field);
            }

            //REMOVE PAGETABLE ENTRY FIELDS
            $fieldsArray = explode(' ', $data['tableColumns']);
            foreach ($fieldsArray as $field) {
                if($this->fields->get("name=$field")){
                    $this->message("Remove: pagetable field: {$field->name}");
                    $this->fields->delete($this->fields->get($field));
                }
            }

            // remove uploads parent page and child pages
            //       remove any stored files
            if($uploadsPage->id){
                if(count($uploadsPage->children) > 0){
                    foreach ($uploadsPage->children as $child) {
                        $this->message("removed upload file page: {$child->title}");
                        $file = $child->File;
                        $this->files->delete($file);
                        $this->pages->delete($child);
                    }
                }
                $this->message("removed uploads parent page");
                $this->pages->delete($uploadsPage);
            }

            // remove uploads parent page and child templates, fieldgroups
            if($uploadsTemplate->id){
                $uploadsTemplate->flags = Template::flagSystemOverride;
                $uploadsTemplate->flags = 0;
                $uploadsTemplate->save();
                if($uploadsTemplate->getNumPages() > 0){
                    throw new WireException("Can't uninstall because template is used by some pages.");
                } else {
                    $fgname = $uploadsTemplate->fieldgroup->name;
                    $this->message("Remove: uploads table template: {$uploadsTemplate}");
                    $this->templates->delete($uploadsTemplate);
                    $this->message("Remove: uploads table fieldgroup: {$fgname}");
                    $this->fieldgroups->delete($this->fieldgroups->get($fgname));
                }
            }
            // remove uploads parent page and child fields
            $field = $this->fields->get("name={$data['uploadsTableName']}");
            if($field->id){
                $this->message("Remove: uploads table: {$field->name}");
                $this->fields->delete($field);
            }
            $fieldsArray = explode(' ', $data['uploadsTableCols']);
            foreach ($fieldsArray as $field) {
                if($this->fields->get("name=$field")){
                    $this->message("Remove: uploads table field: {$field->name}");
                    $this->fields->delete($this->fields->get($field));
                }
            }
        }

        public function makeJSONObj(PageArray $ppages){
            $jsonString = 'var printers = [';
                foreach ($ppages as $printer) {
                    //build material => colors array
                    $lines = explode("\n", $printer->materialAndColor_Textarea);
                    $materials = array();
                    foreach ($lines as $line) {
                        //each line is a unique material-color combo
                        $entry = explode(",", $line);
                        if($entry[2]){ //if available
                            if(array_key_exists($entry[0], $materials)){
                                array_push($materials[$entry[0]], $entry[1]); //push color
                            } else {
                                $materials[$entry[0]] = array($entry[1]); //new entry, first color
                            } 
                        }
                    }
                    
                    $jsonString .= '{"title" : ' . '"' . $printer->title . '", ';
                    $jsonString .= '"materials" : [';
                    foreach ($materials as $material => $colors) {
                        $jsonString .= '{"name" : ' . '"' . $material . '", ';
                        $jsonString .= '"colors" : [';
                        foreach ($colors as $color) {
                            $jsonString .= '"' . $color . '", ';
                        }
                        $jsonString = rtrim($jsonString, ", ");
                        $jsonString .= ']}, ';
                    }
                    $jsonString = rtrim($jsonString, ", ");
                    $jsonString .= ']}, ';
                }
            $jsonString = rtrim($jsonString, ", ");
            $jsonString .= '];';
            return $jsonString;
        }

        public function addUploadForm(HookEvent $event) {
            $markup = file_get_contents($this->upload_form_filepath);
            $printerPages = $this->pages->get("name={$this->pageName}")->children("available_Checkbox=1");
            $json = makeJSONObj($printerPages);
            $js = file_get_contents($this->upload_form_js_filepath);

            $markup .= '<script type="text/javascript">' . $json . $js . "</script>";
            $event->return = str_ireplace("[upload_form]", $markup, $event->return); 
        }

        public function prependUploadHandler(HookEvent $event) {
            $render = $event->arguments(0);

            $page = $render->object;

            $newOptions = array(
                'prependFile' => $this->upload_handler_filepath
                );
            $render->arguments(0, $newOptions);
        }

        protected function getInstalledPage($uninstall, $defaults) {

            $data = wire('modules')->getModuleConfigData($this->className());
            $data = array_merge($defaults, $data);

            $parent = $this->pages->get("name=module,parent=".$this->config->adminRootPageID); 
            $page = $parent->child("name={$data['pageName']}"); 

            if(!$page->id && !$uninstall) {    
                $page = new Page();
                $page->parent = $parent; 


                $pageTable = $this->fields->get("name={$data['tableName']}");
                if(!$pageTable->id){
                    $pageTable = $this->getPageTable($data['tableName'], 
                                                     $data['tableColumns'], 
                                                     $data['tableLabel'], 
                                                     $data['tableTags'], 
                                                     $page->id);
                }

                $pageFG = $this->fieldgroups->get("name={$data['pageName']}_FG");
                if(!$pageFG->id){
                    $pageFG = new Fieldgroup();
                    $pageFG->name = "{$data['pageName']}_FG";
                    $pageFG->append($this->fields->get("name=title"));
                    $pageFG->append($this->fields->get("name=process"));
                    $pageFG->append($pageTable);
                    $pageFG->save(); 
                }
                
                $pageTemplate = $this->templates->get("name={$data['pageName']}_T");
                if(!$pageTemplate->id){
                   $pageTemplate = new Template();
                    $pageTemplate->name = "{$data['pageName']}_T";
                    $pageTemplate->flags = 0;
                    $pageTemplate->noChildren = 0;
                    $pageTemplate->noParents = 0;
                    $pageTemplate->noGlobal = 1;
                    $pageTemplate->slashUrls = 1;
                    $pageTemplate->fieldgroup = $pageFG;
                    $pageTemplate->save(); 
                }

                $page->template = $pageTemplate;
                $page->name = $data['pageName']; 
                $page->title = $data['pageTitle'];
                $page->process = $this; 
                $page->sort = $parent->numChildren;
                $page->save();

                //update config data with ids of new pages, templates, fields...
                $data = wire('modules')->getModuleConfigData('UploadSystem'); 
                $data['page_id'] = $page->id;
                $data['optionsTable_id'] = $pageTable->id;
                $data['pageFieldgroup_id'] = $pageFG->id;
                $data['pageTemplate_id'] = $pageTemplate->id;
                wire('modules')->saveModuleConfigData('UploadSystem', $data);
            }
            
            return $page;   
        }

        public function getPageTable($ptName, $ptCols, $ptLabel, $ptTags, $pid){

            $f = $this->fields->get("name={$ptName}");

            if(!$f->id){
               $data = wire('modules')->getModuleConfigData('UploadSystem'); 
               $fieldsArray = explode(" ", $ptCols);

                $f = new Field();
                $f->type = wire('modules')->get('FieldtypePageTable');
                $f->name = $ptName;
                $f->label = $ptLabel;
                $f->tags = $ptTags;
                $f->parent_id = $pid;
                $f->columns = "title\n";
                foreach ($fieldsArray as $field) {
                    $f->columns .= $field . "\n";
                }
                $f->columns = substr($f->columns, 0, -1);

                //make fieldgroup for template
                $ptFG = $this->fieldgroups->get("name=pagetable_$ptName");
                if(!$ptFG->id){
                    $ptFG = new Fieldgroup();
                    $ptFG->name = "pagetable_$ptName";
                    $ptFG->append($this->fields->get("name=title"));
                }
                
                //Add fields to fieldgroup
                foreach($fieldsArray as $fieldName) {
                    //make column fields if they do not exist
                    $fieldTypename = substr($fieldName, strpos($fieldName, "_") + 1);
                    $fieldShortname = substr($fieldName, 0, strpos($fieldName, "_"));
                    $field = $this->fields->get($fieldShortname);
                    if(!$field->id){
                        //field does not exist
                        $field = new Field();
                        $field->name = $fieldShortname;
                        $this->message("Fieldtype".$fieldTypename);
                        $field->type = wire('modules')->get("Fieldtype".$fieldTypename);
                        $field->label = "$ptName $fieldShortname";
                        $field->tags = $ptTags;
                        $field->save();
                        $ptFG->append($field);
                    } else {
                        //field does exist, so add it
                      if(!$ptFG->getField($field->name)){
                        $ptFG->append($field); 
                      } 
                    }
                    $data['{$ptName}TableFields_ids'] .= $field->id . " ";   
                }
                $data['{$ptName}TableFields_ids'] = substr($data['{$ptName}TableFields_ids'], 0, -1);
                
                $ptFG->save();

                //make template
                $ptTemplate = $this->templates->get("name=pagetable_$ptName");
                if(!$ptTemplate->id){
                    $ptTemplate = new Template();
                    $ptTemplate->name = "pagetable_$ptName";
                    $ptTemplate->flags = 0;
                    $ptTemplate->noChildren = 0;
                    $ptTemplate->noParents = 0;
                    $ptTemplate->noGlobal = 1;
                    $ptTemplate->slashUrls = 1;
                    $ptTemplate->fieldgroup = $ptFG;
                    $ptTemplate->save();
                }
                
                $f->template_id = $ptTemplate->id;

                $f->save(); 

                //update config data with ids of new pages, templates, fields...
                
                $data['optionsTableTemplate_id'] = $ptTemplate->id;
                $data['optionsTableFieldgroup_id'] = $ptFG->id;
                wire('modules')->saveModuleConfigData('UploadSystem', $data);
            }

            return $f;

        }

        /**
        *    get or make uploads parent page, with template and fieldgroup (use a pagetable to hold the filepages)
        **/
        public function getUploadsPage($page, $default) {
            $data = wire('modules')->getModuleConfigData($this->className()); 
            $data = array_merge($default, $data);
            $uploadsPage = $page->child("(name={$data['uploadsPageName']}), (id={$data['uploadsPage_id']})");
            if(!$uploadsPage->id){
                
                $uploadsPage = new Page();
                $uploadsPage->parent = $page;
                $uploadsTable = $this->fields->get("name={$data['uploadsTableName']}");

                if(!$uploadsTable->id){
                    $uploadsTable = $this->getPageTable($data['uploadsTableName'], 
                                                    $data['uploadsTableCols'], 
                                                    $data['uploadsTableLabel'], 
                                                    $data['uploadsTableTags'], 
                                                    $uploadsPage->id);
                }

                $uploadsPageFG = $this->fieldgroups->get("(name={$data['uploadsPageName']}_FG), (id={$data['uploadsPageFieldgroup_id']})");
                if(!$uploadsPageFG->id){
                    $uploadsPageFG = new Fieldgroup();
                    $uploadsPageFG->name = "{$data['uploadsPageName']}_FG";
                    $uploadsPageFG->append($this->fields->get("name=title"));
                    $uploadsPageFG->append($this->fields->get("name=process"));
                    $uploadsPageFG->append($uploadsTable);
                    $uploadsPageFG->save(); 
                }

                $uploadsPageTemplate = $this->templates->get("name={$data['uploadsPageName']}_T");
                if(!$uploadsPageTemplate->id){
                   $uploadsPageTemplate = new Template();
                    $uploadsPageTemplate->name = "{$data['uploadsPageName']}_T";
                    $uploadsPageTemplate->flags = 0;
                    $uploadsPageTemplate->noChildren = 0;
                    $uploadsPageTemplate->noParents = 0;
                    $uploadsPageTemplate->noGlobal = 1;
                    $uploadsPageTemplate->slashUrls = 1;
                    $uploadsPageTemplate->fieldgroup = $uploadsPageFG;
                    $uploadsPageTemplate->save(); 
                }

                $uploadsPage->template = $uploadsPageTemplate;
                $uploadsPage->name = $data['uploadsPageName']; 
                $uploadsPage->title = $data['uploadsPageTitle'];
                $uploadsPage->process = $this; 
                $uploadsPage->save();

                $data['uploadsPage_id'] = $uploadsPage->id;
                $data['uploadsystem_filesTable_id'] = $uploadsTable->id;
                $data['uploadsPageFieldgroup_id'] = $uploadsPageFG->id;
                $data['uploadsPageTemplate_id'] = $uploadsPageTemplate->id;
                wire('modules')->saveModuleConfigData($this->className(), $data);
            }

            return $uploadsPage;
        }

        public static function getModuleConfigInputfields(array $data) {
            $inputfields = new InputfieldWrapper();

            // ask for form markup
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_form_filepath';
            $field->label = "Upload form markup";
            if(isset($data['upload_form_filepath'])) $field->value = $data['upload_form_filepath'];
            $inputfields->add($field);

            // ask for upload handler
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_handler_filepath';
            $field->label = "Upload handler file";
            if(isset($data['upload_handler_filepath'])) $field->value = $data['upload_handler_filepath'];
            $inputfields->add($field);

            //ask for upload javascript
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_form_js_filepath';
            $field->label = "Upload javascript file";
            if(isset($data['upload_form_js_filepath'])) $field->value = $data['upload_form_js_filepath'];
            $inputfields->add($field);

            // ask for upload page url
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_page_url';
            $field->label = "Upload page URL";
            if(isset($data['upload_page_url'])) $field->value = $data['upload_page_url'];
            $inputfields->add($field); 

            // ask for an email address
            $field = wire('modules')->get('InputfieldEmail'); 
            $field->name = 'email';
            $field->label = 'Upload manager email address';
            if(isset($data['email'])) $field->value = $data['email'];
            $inputfields->add($field);

            return $inputfields; 
        }
    }
?>