<?php

/*
* AÂ² Fab Lab Upload System
* Thomas R. Storey (trstorey.sysreturn.net)
* contact: storey.thomas@gmail.com
* 2/12/15
* Makes an admin page to manage the upload system and uploaded files
*/

/*
ISSUES
createRepeater makes a repeater alright, but it does not create the parent page.
because it does not create the parent page, we can't get a parent page id, which is necessary for various
repeater functions. Especially, making an inputfield for the config page.

I can force it to generate a page by going to the field itself in admin and editing the fields.
However, while that does make the inputfield in the config page work, I can't subsequently save and edit repeater items.
I will bet that this is because the parent_id field inside the FieldtypeRepeater object is still set to 0 - so it gets #NaN when it tries to find it's number,
and can't find the parent to save the repeater page to. This is also probably why I don't get any fields when I make new repeater items on the config page.

So, the remedy is to find why the page does not get generated, and force it to generate during createRepeater, causing the parent_id to get registered correctly
*/

    class UploadSystem extends Process implements Module, ConfigurableModule {

        public static function getModuleInfo() {
            return array(
                'title' => 'AÂ² Fab Lab Upload System',
                'summary' => 'Makes an admin page to manage the upload system and uploaded files.',
                'version' => 1,
                'autoload' => true 
            );
        }

        public function __construct() {
            // optionally set our default values before ProcessWire configures the module

        }

        public function init() {
            // you can now assume that your configuration data has been populated to the module
            // meaning you can access $this->fullname; or $this->email; in any of your module's functions

            if(isset($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], $this->upload_page_url) !== false) {
                $this->addHookBefore('PageRender::renderPage', $this, 'prependUploadHandler');
                $this->addHook('ProcessPageView::execute', $this, 'addUploadForm');
            }


        }

        /**
         * Creates a repeater field with associated fieldgroup, template, and page
         *
         * @param string $repeaterName The name of your repeater field
         * @param string $repeaterFields List of field names to add to the repeater, separated by spaces
         * @param string $repeaterLabel The label for your repeater
         * @param string $repeaterTags Tags for the repeater field
         * @return Returns the new Repeater field
         *
         */
        public function createRepeater($repeaterName,$repeaterFields,$repeaterLabel,$repeaterTags) {
            $fieldsArray = explode(' ',$repeaterFields);
            $f = new Field();
            $f->type = $this->modules->get("FieldtypeRepeater");
            $f->name = $repeaterName;
            $f->label = $repeaterLabel;
            $f->tags = $repeaterTags;
            $f->repeaterReadyItems = 3;
            
            //Create fieldgroup
            $repeaterFg = new Fieldgroup();
            $repeaterFg->name = "repeater_$repeaterName";
            
            //Add fields to fieldgroup
            foreach($fieldsArray as $field) {
                $repeaterFg->append($this->fields->get($field));
            }
            
            $repeaterFg->save();
            
            //Create template
            $repeaterT = new Template();
            $repeaterT->name = "repeater_$repeaterName";
            $repeaterT->flags = 8;
            $repeaterT->noChildren = 1;
            $repeaterT->noParents = 1;
            $repeaterT->noGlobal = 1;
            $repeaterT->slashUrls = 1;
            $repeaterT->fieldgroup = $repeaterFg;
            
            $repeaterT->save();
            
            //Setup page for the repeater - Very important
            $repeaterPage = "for-field-{$f->id}";
            $f->parent_id = $this->pages->get("name=$repeaterPage")->id;
            $f->template_id = $repeaterT->id;
            $f->repeaterReadyItems = 3;
            
            //Now, add the fields directly to the repeater field
            foreach($fieldsArray as $field) {
                $f->repeaterFields = $this->fields->get($field);
            }
            
            $f->save();
            
            return $f;
        }

        

        public function ___install() {
            $page = $this->getInstalledPage();
            $repeaterConfig = array(
                'name' => 'uploadsystem_machines',
                'fields' => 'machine_name materials_colors',
                'label' => 'UploadSystem Machines',
                'tags' => 'UploadSystem'
                ); 
            $this->message("Installed to {$page->path}");
            $repeater = $this->createRepeater($repeaterConfig['name'], 
                                              $repeaterConfig['fields'], 
                                              $repeaterConfig['label'], 
                                              $repeaterConfig['tags']);
            $this->message("field id: {$repeater->id}");
            $this->message("page id: {$repeater->parent_id}");
            //preconfigure repeater setup
            $data = array(
            'repeaterFieldID' => $repeater->id,
            'repeaterPageParentID' => $repeater->parent_id,
            'upload_form_filepath' => 'filepath/to/upload_form.inc',
            'upload_handler_filepath' => 'filepath/to/upload_handler.inc',
            'upload_page_url' => 'relative/upload_page/url',
            'email' => 'uploadmanager@email.com'
            ); 

            $module = 'UploadSystem'; 

            wire('modules')->saveModuleConfigData($module, $data);
        }

        public function ___uninstall() {
            $page = $this->getInstalledPage();  
            if($page->id) { 
                $this->message("Removed {$page->path}");
                $this->pages->delete($page); 
            }
           $repeater = $this->pages->get($this->repeaterPageParentID);
            if($repeater->id){
                $this->message("Removed repeater page {$this->repeaterPageParentID}");
                $this->pages->delete($repeater);
            }
            $repeater_field = $this->fields->get($this->repeaterFieldID);
            if($repeater_field->id){
                $this->message("Removed field {$this->repeaterFieldID}");
                $this->fields->delete($repeater_field);
            }
        }

        public function addUploadForm(HookEvent $event) {
            $markup = file_get_contents($this->upload_form_filepath);
            $event->return = str_ireplace("[upload_form]", $markup, $event->return); 
        }

        public function prependUploadHandler(HookEvent $event) {
            $render = $event->arguments(0);

            $page = $render->object;

            $newOptions = array(
                'prependFile' => $this->upload_handler_filepath
                );
            $render->arguments(0, $newOptions);
        }

        protected function getInstalledPage() {
            $parent = $this->pages->get("name=module,parent=".$this->config->adminRootPageID); 
            $page = $parent->child("name=uploadsystem_machines"); 

            if(!$page->id) {    
                $page = new Page();
                $page->parent = $parent; 
                $page->template = $this->templates->get('admin');
                $page->name = "uploadsystem_machines"; 
                $page->title = "Upload Management Page";
                //$page->addStatus(Page::statusHidden);
                $page->process = $this; 
                $page->sort = $parent->numChildren;
                $page->save();
            }
            return $page;   
        }

        public static function getModuleConfigInputfields(array $data) {
            $inputfields = new InputfieldWrapper();
            $f = wire("fields")->get($data['repeaterFieldID']);
            $f->parent_id = 1013;
            $f->save();

            // ask for form markup
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_form_filepath';
            $field->label = "Upload form markup";
            if(isset($data['upload_form_filepath'])) $field->value = $data['upload_form_filepath'];
            $inputfields->add($field);

            // ask for upload handler
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_handler_filepath';
            $field->label = "Upload handler file";
            if(isset($data['upload_handler_filepath'])) $field->value = $data['upload_handler_filepath'];
            $inputfields->add($field); 

            // ask for upload page url
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_page_url';
            $field->label = "Upload page URL";
            if(isset($data['upload_page_url'])) $field->value = $data['upload_page_url'];
            $inputfields->add($field); 

            // ask for an email address
            $field = wire('modules')->get('InputfieldEmail'); 
            $field->name = 'email';
            $field->label = 'Upload manager email address';
            if(isset($data['email'])) $field->value = $data['email'];
            $inputfields->add($field);

            
           $repeater = wire("modules")->get("InputfieldRepeater");
            $repeater->name = "uploadsystem_printer_specifications";
            $repeater->label = "UploadSystem Printer Specifications";
            //$repeater->set('page', wire('pages')->get($data['repeaterPageParentID']));
            $repeater->set('page', wire('pages')->get(1013));
            $repeater->set("field", wire("fields")->get($data['repeaterFieldID']));
            if(isset($data['uploadsystem_printer_specifications'])) $repeater->value = $data['uploadsystem_printer_specifications'];
            $inputfields->add($repeater);


            return $inputfields; 
        }
    }
?>