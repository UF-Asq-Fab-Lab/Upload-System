<?php

/*
* A² Fab Lab Upload System
* Thomas R. Storey (trstorey.sysreturn.net)
* contact: storey.thomas@gmail.com
* 2/12/15
* Makes an admin page to manage the upload system and uploaded files
*/

    class UploadSystem extends Process implements Module, ConfigurableModule {

        public static function getModuleInfo() {
            return array(
                'title' => 'A² Fab Lab Upload System',
                'summary' => 'Makes an admin page to manage the upload system and uploaded files.',
                'version' => 1,
                'autoload' => true 
            );
        }

        static protected $defaluts = array(
            'tableName' => "uploadsystem_options",
            'tableColumns' => "printer_name material_name color",
            'tableLabel' => "UploadSystem Options Table",
            'tableTags' => "upload"
        );

        public function __construct() {
            // optionally set our default values before ProcessWire configures the module
            // previously, set $this-> tableName, etc to values in $defaults array
            $this->setArray(self::$defaults);
        }

        public function init() {
            // you can now assume that your configuration data has been populated to the module
            // meaning you can access $this->fullname; or $this->email; in any of your module's functions

            if(isset($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], $this->upload_page_url) !== false) {
                $this->addHookBefore('PageRender::renderPage', $this, 'prependUploadHandler');
                $this->addHook('ProcessPageView::execute', $this, 'addUploadForm');
            }


        }

        public function getPageTable($ptName, $ptCols, $ptLabel, $ptTags, $pid){

            $f = $this->fields->get("name={$ptName}");

            if(!$f->id){
               $fieldsArray = explode(" ", $ptCols);

                $f = new Field();
                $f->type = wire('modules')->get('FieldtypePageTable');
                $f->name = $ptName;
                $f->label = $ptLabel;
                $f->tags = $ptTags;
                $f->parent_id = $pid;
                foreach ($fieldsArray as $field) {
                    $f->columns .= $field . "\n";
                }
                $f->columns = $ptCols;

                //make fieldgroup for template
                $ptFG = $this->fieldgroups->get("name=pagetable_$ptName");
                if(!$ptFG->id){
                    $ptFG = new Fieldgroup();
                    $ptFG->name = "pagetable_$ptName";
                }
                
                //Add fields to fieldgroup
                foreach($fieldsArray as $fieldName) {
                    //make column fields if they do not exist
                    $field = $this->fields->get($fieldName);
                    if(!$field->id){
                        //field does not exist
                        $fgf = new Field();
                        $fgf->name = $fieldName;
                        $fgf->type = wire('modules')->get('FieldtypeText');
                        $fgf->label = "$ptName $fieldName";
                        $fgf->save();
                        $ptFG->append($this->fields->get($field));
                    } else {
                        //field does exist, so add it
                      if(!$ptFG->getField($field->name)){
                        $ptFG->append($this->fields->get($field)); 
                      } 
                    }   
                }
                
                $ptFG->save();

                //make template
                $ptTemplate = $this->templates->get("name=pagetable_$ptName");
                if(!$ptTemplate->id){
                    $ptTemplate = new Template();
                    $ptTemplate->name = "pagetable_$ptName";
                    $ptTemplate->flags = 0;
                    $ptTemplate->noChildren = 0;
                    $ptTemplate->noParents = 0;
                    $ptTemplate->noGlobal = 1;
                    $ptTemplate->slashUrls = 1;
                    $ptTemplate->fieldgroup = $ptFG;
                    $ptTemplate->save();
                }
                
                $f->template_id = $ptTemplate->id;

                $f->save(); 
            }

            return $f;

        }

        public function ___install() {
            $page = $this->getInstalledPage(false);
            $this->message("Installed to {$page->path}");
        }

        /**
        * uninstall - delete everything created by the module: module page, 
        *                                                      page template, 
        *                                                      page template fieldgroup, 
        *                                                      pagetable (page template field)
        *                                                      pagetable template
        *                                                      pagetable fieldgroup
        *                                                      pagetable page fields
        *
        *
        **/

        public function ___uninstall() {
            $page = $this->getInstalledPage(true);

            if($page->id){
                $template = $page->template;
                $ptTemplate = $this->getPageTable("uploadsystem_options", "printer_name material_name color", "UploadSystem Options Table", "upload", $page->id);
                if($page->id) { 
                    $this->message("Removed {$page->path}");
                    $this->pages->delete($page); 
                }
                if($template->id){
                    $template->flags = Template::flagSystemOverride;
                    $template->flags = 0;
                    $template->save();
                    $fgid = $template->fieldgroup->id;
                    $this->message("Remove: page template: {$template->id}");
                    $this->templates->delete($template);
                    $this->message("Remove: page template fieldgroup: {$fgid}");
                    $this->fieldgroups->delete($this->fieldgroups->get($fgid));
                }
                if($ptTemplate->id){
                    $ptTemplate = $this->templates->get($ptTemplateID);
                    $ptTemplate->flags = Template::flagSystemOverride;
                    $ptTemplate->flags = 0;
                    $ptTemplate->save();
                    $fgid = $ptTemplate->fieldgroup->id;
                    $this->message("Remove: pagetable template: {$ptTemplateID}");
                    $this->templates->delete($ptTemplate);
                    $this->message("Remove: pagetable template fieldgroup: {$fgid}");
                    $this->fieldgroups->delete($this->fieldgroups->get($fgid));
                }
                $field = $this->fields->get("name={$this->tableName}");
                if($field->id){
                    $this->message("Remove: pagetable: {$field->name}");
                    $this->fields->delete($field);
                }
                $fieldsArray = explode(' ', $this->tableColumns);
                foreach ($fieldsArray as $field) {
                    if($this->fields->get("name=$field")){
                        $this->message("Remove: pagetable field: {$field->name}");
                        $this->fields->delete($field);
                    }
                }
            } else {
                $this->message("page does not exist");
            }
            
        }

        public function addUploadForm(HookEvent $event) {
            $markup = file_get_contents($this->upload_form_filepath);
            $event->return = str_ireplace("[upload_form]", $markup, $event->return); 
        }

        public function prependUploadHandler(HookEvent $event) {
            $render = $event->arguments(0);

            $page = $render->object;

            $newOptions = array(
                'prependFile' => $this->upload_handler_filepath
                );
            $render->arguments(0, $newOptions);
        }

        protected function getInstalledPage($uninstall) {
            $parent = $this->pages->get("name=module,parent=".$this->config->adminRootPageID); 
            $page = $parent->child("name=uploadsystem_management"); 

            if(!$page->id && !$uninstall) {    
                $page = new Page();
                $page->parent = $parent; 


                $pageTable = $this->fields->get("name=uploadsystem_options");
                if(!$pageTable->id){
                    $pageTable = $this->getPageTable("uploadsystem_options", "printer_name material_name color", "UploadSystem Options Table", "upload", $page->id);
                }

                $pageFG = $this->fieldgroups->get("name=uploadsystem_management_FG");
                if(!$pageFG->id){
                    $pageFG = new Fieldgroup();
                    $pageFG->name = 'uploadsystem_management_FG';
                    $pageFG->append($this->fields->get("name=process"));
                    $pageFG->append($pageTable);
                    $pageFG->save(); 
                }
                
                $pageTemplate = $this->templates->get("name=uploadsystem_management_T");
                if(!$pageTemplate->id){
                   $pageTemplate = new Template();
                    $pageTemplate->name = "uploadsystem_management_T";
                    $pageTemplate->flags = 0;
                    $pageTemplate->noChildren = 0;
                    $pageTemplate->noParents = 0;
                    $pageTemplate->noGlobal = 1;
                    $pageTemplate->slashUrls = 1;
                    $pageTemplate->fieldgroup = $pageFG;
                    $pageTemplate->save(); 
                }

                $page->template = $this->templates->get('uploadsystem_management_T');
                $page->name = "uploadsystem_management"; 
                $page->title = "Upload Management Page";
                $page->process = $this; 
                $page->sort = $parent->numChildren;
                $page->save();
            }
            return $page;   
        }



        public static function getModuleConfigInputfields(array $data) {
            $inputfields = new InputfieldWrapper();

            // ask for form markup
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_form_filepath';
            $field->label = "Upload form markup";
            if(isset($data['upload_form_filepath'])) $field->value = $data['upload_form_filepath'];
            $inputfields->add($field);

            // ask for upload handler
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_handler_filepath';
            $field->label = "Upload handler file";
            if(isset($data['upload_handler_filepath'])) $field->value = $data['upload_handler_filepath'];
            $inputfields->add($field); 

            // ask for upload page url
            $field = wire('modules')->get('InputfieldText');
            $field->name = 'upload_page_url';
            $field->label = "Upload page URL";
            if(isset($data['upload_page_url'])) $field->value = $data['upload_page_url'];
            $inputfields->add($field); 

            // ask for an email address
            $field = wire('modules')->get('InputfieldEmail'); 
            $field->name = 'email';
            $field->label = 'Upload manager email address';
            if(isset($data['email'])) $field->value = $data['email'];
            $inputfields->add($field);

            return $inputfields; 
        }
    }
?>